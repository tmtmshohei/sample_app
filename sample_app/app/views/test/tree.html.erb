<html>
<head>
  <meta charset="utf-8"/>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/89/three.min.js"></script>
  <script>
    // ページの読み込みを待つ
    window.addEventListener('load', init);
    function init() {
      // サイズを指定
      const width = 960;
      const height = 540;
      let rot = 0; // 角度
      let mouseX = 0; // マウス座標
      // レンダラーを作成
      const renderer = new THREE.WebGLRenderer({
        canvas: document.querySelector('#myCanvas'),
      });
      renderer.setSize(width, height);
      // シーンを作成
      const scene = new THREE.Scene();
      // カメラを作成
      const camera = new THREE.PerspectiveCamera(45, width / height);

      // 平行光源
      const directionalLight = new THREE.DirectionalLight(0xFFFFFF,2);
      directionalLight.position.set(1, 1, 1);
      // シーンに追加
      scene.add(directionalLight);
      //ライト２つ目　環境光
      const light2 = new THREE.AmbientLight(0x555555,4);
      scene.add(light2);

      // マテリアルを作成
      const material = new THREE.MeshStandardMaterial({color:0xffffff});
      // 球体の形状を作成します
      const geometry = new THREE.SphereGeometry(300, 30, 30);
      // 形状とマテリアルからメッシュを作成します
      const Mesh = new THREE.Mesh(geometry, material);
      // シーンにメッシュを追加します
      scene.add(Mesh);
      // 星屑を作成します (カメラの動きをわかりやすくするため)
      createStarField();
      function createStarField() {
        // 形状データを作成
        const geometry = new THREE.Geometry();
        for (let i = 0; i < 1000; i++) {
          geometry.vertices.push(new THREE.Vector3(
            3000 * (Math.random() - 0.5),
            3000 * (Math.random() - 0.5),
            3000 * (Math.random() - 0.5),
          ));
        }
        // マテリアルを作成
        const material = new THREE.PointsMaterial({
          size: 10,
          color: 0xFFFFFF
        });
        // 物体を作成
        const mesh = new THREE.Points(geometry, material);
        scene.add(mesh);
      }
      // マウス座標はマウスが動いた時のみ取得できる
      document.addEventListener('mousemove', (event) => {
        mouseX = event.pageX;
      });
      tick();
      // 毎フレーム時に実行されるループイベントです
      function tick() {
        // マウスの位置に応じて角度を設定
        // マウスのX座標がステージの幅の何%の位置にあるか調べてそれを360度で乗算する
        const targetRot = (mouseX / window.innerWidth) * 360;
        // イージングの公式を用いて滑らかにする
        // 値 += (目標値 - 現在の値) * 減速値
        rot += (targetRot - rot) * 0.02;
        // ラジアンに変換する
        const radian = rot * Math.PI / 180;
        // 角度に応じてカメラの位置を設定
        camera.position.x = 1000 * Math.sin(radian);
        camera.position.z = 1000 * Math.cos(radian);
        // 原点方向を見つめる
        camera.lookAt(new THREE.Vector3(0, 0, 0));
        // 地球は常に回転させておく
        Mesh.rotation.y += 0.01;
        // レンダリング
        renderer.render(scene, camera);
        requestAnimationFrame(tick);
      }
    }
  </script>
</head>
<body>
  <canvas id="myCanvas"></canvas>
</body>
</html>
